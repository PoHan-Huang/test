[{"/Users/hanfour/test/src/index.js":"1","/Users/hanfour/test/src/App.js":"2","/Users/hanfour/test/src/reportWebVitals.js":"3","/Users/hanfour/test/src/mock.js":"4","/Users/hanfour/test/src/styled.js":"5","/Users/hanfour/test/src/State.jsx":"6"},{"size":500,"mtime":1625472593632,"results":"7","hashOfConfig":"8"},{"size":12913,"mtime":1625739178435,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1625472219730,"results":"10","hashOfConfig":"8"},{"size":805,"mtime":1625472449133,"results":"11","hashOfConfig":"8"},{"size":1062,"mtime":1625730773265,"results":"12","hashOfConfig":"8"},{"size":989,"mtime":1625738169660,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1w79p1g",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hanfour/test/src/index.js",[],["28","29"],"/Users/hanfour/test/src/App.js",["30"],"import * as React from \"react\";\nimport * as Ant from \"antd\";\nimport 'antd/dist/antd.css';\nimport { Wrapper, Flex } from \"./styled\";\nimport State from \"./State.jsx\";\nimport \"./mock\";\n\nfunction App() {\n  const [originData, setOriginData] = React.useState([]);\n  const [datasource, setDataSource] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [stateData, setStateData] = React.useState([]);\n  const [stateSelect, setStateSelect] = React.useState(\"Georgia\");\n  const [citySelect, setCitySelect] = React.useState(\"all\");\n  const [typeSelect, setTypeSelect] = React.useState(\"all\");\n  const [priceSelect, setPriceSelect] = React.useState(\"all\");\n  const [filterData, setFilterData] = React.useState([]);\n  const columns = [\n    {\n      title: \"State\",\n      dataIndex: \"state\",\n      key: \"state\",\n    },\n    {\n      title: \"City\",\n      dataIndex: \"city\",\n      key: \"city\",\n    },\n    {\n      title: \"Type\",\n      dataIndex: \"type\",\n      key: \"type\",\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (text, row) => {\n        const filter = datasource.filter(item => item.city === row.city);\n        if (text >= filter[0]?.avgPrice * 1.2) {\n          return (\n            <span style={{color: `red`}}>{text}</span>\n          )\n        } else if (text <= filter[0]?.avgPrice * 0.8) {\n          return (\n            <span style={{color: `green`}}>{text}</span>\n          )\n        } else {\n          return (\n            <span>{text}</span>\n          )\n        }\n      }\n    }\n  ];\n\n  const handleStateChange = value => {\n    setStateSelect(value);\n    let filter = originData.filter(item => {\n      return item.state === value;\n    });\n    setFilterData(filter);\n    setCitySelect(\"all\");\n    setTypeSelect(\"all\");\n    setPriceSelect(\"all\");\n    onStateFilter(value, originData);\n  };\n\n  const handleCityChange = value => {\n    setCitySelect(value);\n    let filter;\n    if (value === \"all\") {\n      if (typeSelect === \"all\" && priceSelect !== \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.price === priceSelect\n          });\n      } else if (typeSelect !== \"all\" && priceSelect === \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.type === typeSelect\n          });\n      } else {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n      }\n    } else {\n      if (typeSelect === \"all\" && priceSelect !== \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.city === value\n          })\n          .filter(item => {\n            return item.price === priceSelect\n          });\n      } else if (typeSelect !== \"all\" && priceSelect === \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.city === value\n          })\n          .filter(item => {\n            return item.type === typeSelect\n          });\n      } else {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.city === value\n          });\n      }\n    }\n    setFilterData(filter);\n  };\n\n  const handleTypeChange = value => {\n    setTypeSelect(value);\n    let filter;\n    if (value === \"all\") {\n      if (citySelect === \"all\" && priceSelect !== \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.price === priceSelect\n          });\n      } else if (citySelect !== \"all\" && priceSelect === \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.city === citySelect\n          });\n      } else {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n      }\n    } else {\n      if (citySelect === \"all\" && priceSelect !== \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.type === value\n          })\n          .filter(item => {\n            return item.price === priceSelect\n          });\n      } else if (citySelect !== \"all\" && priceSelect === \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.city === citySelect\n          })\n          .filter(item => {\n            return item.type === value\n          });\n      } else {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.type === value\n          });\n      }\n    }\n    setFilterData(filter);\n  }\n\n  const handlePriceChange = value => {\n    setPriceSelect(value);\n    let filter;\n    let end = value !== \"all\" ? value + 99 : 0;\n    if (value === \"all\") {\n      if (citySelect === \"all\" && typeSelect !== \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.type === typeSelect\n          });\n      } else if (citySelect !== \"all\" && typeSelect === \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.city === citySelect\n          });\n      } else {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n      }\n    } else {\n      if (citySelect === \"all\" && typeSelect !== \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.type === typeSelect\n          })\n          .filter(item => {\n            return item.price >= value && item.price <= end\n          });\n      } else if (citySelect !== \"all\" && typeSelect === \"all\") {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.city === citySelect\n          })\n          .filter(item => {\n            return item.price >= value && item.price <= end\n          });\n      } else {\n        filter = originData\n          .filter(item => {\n            return item.state === stateSelect\n          })\n          .filter(item => {\n            return item.price >= value && item.price <= end\n          });\n      }\n    }\n    setFilterData(filter);\n  }\n\n  const onStateFilter = (state, list) => {\n    let key = 0;\n    const output = list\n      .filter((item) => {\n        if (state) {\n          return item?.state === state\n        } else {\n          return item\n        }\n      })\n      .reduce((previousValue, currentValue) => {\n        if (previousValue?.find((item) => item.city === currentValue.city)) {\n          previousValue = previousValue.map((item) => {\n            if (item.city === currentValue.city) {\n              return ({\n                key: item.key,\n                houses: item.houses + 1,\n                priceTotal: item.priceTotal + currentValue.price,\n                avgPrice: Math.round((item.priceTotal + currentValue.price) / (item.houses + 1)),\n                ...currentValue\n              })\n            }\n            return item\n          });\n        } else {\n          previousValue.push({\n            key: key++,\n            state: currentValue.state,\n            city: currentValue.city,\n            houses: 1,\n            priceTotal: currentValue.price,\n            avgPrice: currentValue.price,\n          })\n        }\n        return previousValue\n      }, []);\n    setDataSource(output);\n  };\n\n  React.useEffect(() => {\n    fetch(\"/api/properties\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const output = result?.data.map((item, idx) => {\n            return ({\n              key: idx,\n              ...item,\n            })\n          });\n          setOriginData(output);\n          setFilterData(output.filter(item => {return item.state === stateSelect}));\n          onStateFilter(stateSelect, output);\n          setIsLoading(false);\n        },\n        (error) => {\n          console.log(error);\n          setIsLoading(false);\n        }\n      )\n  },[]);\n\n  React.useEffect(() => {\n    let key = 0;\n    const newArr = originData.reduce((previousValue, currentValue) => {\n      if (previousValue?.find((item) => item?.state === currentValue.state)) {\n        previousValue = previousValue.map((item) => {\n          if (item?.state === currentValue.state) {\n            item = {\n              key: item.key,\n              state: item.state,\n              data: [\n                {\n                  city: currentValue.city,\n                  type: currentValue.type,\n                  price: currentValue.price,\n                },\n                ...item.data\n              ],\n              priceTotal: item.priceTotal + currentValue.price,\n              avgPrice: Math.round((item.priceTotal + currentValue.price) / (item.data.length + 1))\n            }\n          }\n          return item\n        });\n      } else {\n        previousValue.push({\n          key: key++,\n          state: currentValue.state,\n          data: [{\n            city: currentValue.city,\n            type: currentValue.type,\n            price: currentValue.price,\n          }],\n          priceTotal: currentValue.price,\n          avgPrice: currentValue.price\n        })\n      }\n      return previousValue;\n    },[])\n    setStateData(newArr);\n  },[originData]);\n\n  return (\n    <Wrapper className={isLoading && \"justify-content-center\"}>\n    {isLoading ?\n      <Ant.Spin size=\"large\" tip=\"Loading..\"/>\n      :\n      <>\n      <div className=\"table\">\n        <State list={datasource} loading={isLoading} citySelect={citySelect}/>\n        <Flex className=\"select\">\n          <Ant.Select defaultValue={stateSelect} onChange={handleStateChange}>\n            {stateData.map((item, idx) => (\n              <Ant.Select.Option key={idx} value={item.state}>{item.state}</Ant.Select.Option>\n            ))}\n          </Ant.Select>\n          <Ant.Select value={citySelect} onChange={handleCityChange}>\n            <Ant.Select.Option key={\"all\"} value={\"all\"}>All</Ant.Select.Option>\n            {datasource\n              .map((item, idx) => (\n                <Ant.Select.Option key={idx} value={item.city}>{item.city}</Ant.Select.Option>\n              ))\n            }\n          </Ant.Select>\n          <Ant.Select value={typeSelect} onChange={handleTypeChange}>\n            <Ant.Select.Option key={\"all\"} value={\"all\"}>All</Ant.Select.Option>\n            {originData\n              .reduce((previousValue, currentValue) => {\n                if (previousValue?.find((item) => item === currentValue.type)) {\n                } else {\n                  previousValue.push(currentValue.type)\n                }\n                return previousValue;\n              },[])\n              .map((item, idx) => (\n                <Ant.Select.Option key={idx} value={item}>{item}</Ant.Select.Option>\n              ))\n            }\n          </Ant.Select>\n          <Ant.Select value={priceSelect} onChange={handlePriceChange}>\n            <Ant.Select.Option key={\"all\"} value={\"all\"}>All</Ant.Select.Option>\n            {originData\n              .reduce((previousValue, currentValue) => {\n                previousValue.push(Math.floor(currentValue.price/100));\n                previousValue = Array.from(new Set(previousValue))\n                return previousValue;\n              },[])\n              .sort((a, b) => {\n                return a - b;\n              })\n              .map((item, idx) => {\n                const start = item*100;\n                const end = start + 99;\n                return (\n                  <Ant.Select.Option key={idx} value={start}>{start + `~` + end}</Ant.Select.Option>\n                )\n              })\n            }\n          </Ant.Select>\n        </Flex>\n        <Ant.Table\n          dataSource={filterData}\n          columns={columns}\n          loading={isLoading}\n          bordered\n          pagination={{\n            hideOnSinglePage: true\n          }}\n        />\n      </div>\n      </>\n    }\n    </Wrapper>\n  );\n}\n\n\nexport default App;","/Users/hanfour/test/src/reportWebVitals.js",[],"/Users/hanfour/test/src/mock.js",[],"/Users/hanfour/test/src/styled.js",[],"/Users/hanfour/test/src/State.jsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":316,"column":5,"nodeType":"37","endLine":316,"endColumn":7,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'stateSelect'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilterData' needs the current value of 'stateSelect'.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [stateSelect]",{"range":"44","text":"45"},[8941,8943],"[stateSelect]"]